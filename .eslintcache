[{"/home/ubuntu/react_folder/ai-health-training/src/index.js":"1","/home/ubuntu/react_folder/ai-health-training/src/reportWebVitals.js":"2","/home/ubuntu/react_folder/ai-health-training/src/initial_data.js":"3","/home/ubuntu/react_folder/ai-health-training/src/column.jsx":"4","/home/ubuntu/react_folder/ai-health-training/src/exercise.jsx":"5","/home/ubuntu/react_folder/ai-health-training/src/components/Navigation.js":"6"},{"size":3748,"mtime":1611653845120,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611478000300,"results":"9","hashOfConfig":"8"},{"size":1463,"mtime":1611653216386,"results":"10","hashOfConfig":"8"},{"size":1624,"mtime":1611653186430,"results":"11","hashOfConfig":"8"},{"size":1864,"mtime":1611653235567,"results":"12","hashOfConfig":"8"},{"size":1284,"mtime":1611491156818,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"16k6jgb",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"/home/ubuntu/react_folder/ai-health-training/src/index.js",["28"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport initialData from './initial_data';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from './column';\nimport '@atlaskit/css-reset';\nimport reportWebVitals from './reportWebVitals';\nimport Navigation from './components/Navigation';\n// import App from './App';\n\nconst Container = styled.div`\n  display:flex;\n  flex-direction:column;\n`;\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragStart = start => {\n    document.body.style.color = 'orange';\n    document.body.style.transition = 'background-color 0.2s ease';\n    const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\n    this.setState({\n      homeIndex,\n    });\n  };\n\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination\n      ? destination.index / Object.keys(this.state.exercises).length\n      : 0;\n    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n\n  }\n\n  onDragEnd = result => {\n\n    this.setState({\n      homeIndex: null,\n    })\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newExerciseIds = Array.from(start.exerciseIds);\n      newExerciseIds.splice(source.index, 1);\n      newExerciseIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        exerciseIds: newExerciseIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // Moving from one list to another\n    const startExerciseIds = Array.from(start.exerciseIds);\n    startExerciseIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      exerciseIds: startExerciseIds,\n    };\n\n    const finishExerciseIds = Array.from(finish.exerciseIds);\n    finishExerciseIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      exerciseIds: finishExerciseIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    this.setState(newState);\n  };\n  render() {\n    return (\n      <DragDropContext\n        onDragStart={this.onDragStart}\n        // onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}>\n        <Container>\n          {this.state.columnOrder.map((columnId, index) => {\n            const column = this.state.columns[columnId];\n            const exercises = column.exerciseIds.map(exerciseId => this.state.exercises[exerciseId]);\n\n            // const isDropDisabled = index <this.state.homeIndex;\n            const isDropDisabled = false;\n            return <Column key={column.id} column={column} exercises={exercises} isDropDisabled={isDropDisabled} />;\n          })}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["29","30"],"/home/ubuntu/react_folder/ai-health-training/src/reportWebVitals.js",[],"/home/ubuntu/react_folder/ai-health-training/src/initial_data.js",[],"/home/ubuntu/react_folder/ai-health-training/src/column.jsx",[],"/home/ubuntu/react_folder/ai-health-training/src/exercise.jsx",[],"/home/ubuntu/react_folder/ai-health-training/src/components/Navigation.js",[],{"ruleId":"31","severity":1,"message":"32","line":9,"column":8,"nodeType":"33","messageId":"34","endLine":9,"endColumn":18},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},"no-unused-vars","'Navigation' is defined but never used.","Identifier","unusedVar","no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-global-assign","no-unsafe-negation"]